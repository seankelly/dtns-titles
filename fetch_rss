#!/usr/bin/env python3

import argparse
import json
import os.path
import re

from dateutil import parser
from lxml import etree
import requests

DTNS_RSS_URL = 'https://feeds.feedburner.com/DailyTechNewsShow'
DTNS_NUMBER = re.compile(r'DTNS (\d+)')


def dtns_extra_title(raw_title):
    """Extract the DTNS episode number and title from the full title."""
    episode_match = DTNS_NUMBER.search(raw_title)
    if episode_match:
        episode_number = int(episode_match.group(1))
        start = episode_match.start()
        end = episode_match.end()
        raw_title = raw_title[0:start] + raw_title[end:]
        title = raw_title.strip(' -â€“')
        return episode_number, title


def dtns_load_feed():
    """Parse all episodes found in the feed."""
    feed_req = requests.get(DTNS_RSS_URL)
    feed_tree = etree.fromstring(feed_req.content)
    episodes = []
    feed_episodes = feed_tree.xpath('//item')
    for episode in feed_episodes:
        raw_title_el = episode.find('title')
        raw_title = raw_title_el.text
        dtns_title = dtns_extra_title(raw_title)
        if dtns_title:
            episode_number, title = dtns_title
        else:
            # Skip unknown episodes. This is run in a cron so minimize output.
            continue
        enclosure = episode.find('enclosure')
        pub_date = episode.find('pubDate')
        air_date = parser.parse(pub_date.text)
        audio = enclosure.get('url')
        episodes.append({
            'number': episode_number,
            'title': title,
            'date': air_date.strftime('%Y-%m-%d'),
            'download': audio,
        })
    return episodes


def dtns_add_episodes(dtns_episodes):
    feed_episodes = dtns_load_feed()
    known_episodes = {episode['number'] for episode in dtns_episodes}
    new_episodes = []
    for feed_episode in feed_episodes:
        if feed_episode['number'] not in known_episodes:
            new_episodes.append(feed_episode)
    new_episodes.sort(key=lambda episode: episode['number'])
    if new_episodes:
        for new_episode in new_episodes:
            print("Adding new episode %d - %s" % (new_episode['number'],
                                                  new_episode['title']))
        dtns_episodes.extend(new_episodes)
    return len(new_episodes) > 0


def main():
    parser = argparse.ArgumentParser(description="Fetch new DTNS titles")
    parser.add_argument('--output', default='titles.json',
                        help="Output file for the titles.")
    args = parser.parse_args()

    if os.path.exists(args.output):
        with open(args.output, 'r') as input:
            episodes = json.load(input)
    else:
        episodes = {}

    found_new_episodes = dtns_add_episodes(episodes['dailytechnewsshow'])

    if found_new_episodes:
        with open(args.output, 'w') as output:
            json.dump(episodes, output)


if __name__ == '__main__':
    main()
